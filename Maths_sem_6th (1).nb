Bisection[a0_,b0_,m_] :=Module[{a=N[a0],b=N[b0]},c=(a+b)/2;
k=0
While[k<m && ((b-a)/2)>10^(-7),If[Sign[f[b]]==Sign[f[c]],b=c,a=c];
c=(a+b)/2;
k=k+1;];
Print["c=",NumberForm[c,16]];
Print["f[c]=",NumberForm[f[c],16]];];

//////////////////////////////////////////////////////////////

SecantMethod[x0_,x1_,max_]:=Module[{},k=1;p0=N[x0];
p1=N[x1];
p2=p1;
p1=p0;
While[(k<max && Abs[f[p2]]>5*10^(-7)),
p0=p1;
p1=p2;
p2=p1-(f[p1](p1-p0)/(f[p1]-f[p0]));
k=k+1;];
Print["p",k,"=",NumberForm[p2,11]]; 
Print["f[p",k,"]=",NumberForm[f[p2],11]];]
/////////////////////////////////////////////////////////////

RegulaFalsi[a0_, b0_, m_] := Module[{}, a = N[a0]; b = N[b0];
  If[f[a]*f[b] > 0, Print["interval is not correct"]; Break[],
   c = (a*f[b] - b*f[a])/(f[b] - f[a]);
   k = 0;
   While[(k < m && Abs[f[c]] > 10^(-12)), 
    If[Sign[f[b]] == Sign[f[c]], b = c, a = c;];
    c = (a*f[b] - b*f[a])/(f[b] - f[a]);
    k = k + 1;];
   Print["the result after ", k, "iterations=  ", NumberForm[c, 16]];
   Print["f[c]=", NumberForm[f[c], 16]];];]
   ////////////////////////////////////////////////////////

   NewtonRaphson[x0_,max_]:=Module[{},k=0;p0=N[x0];
p1=p0;
While[(k<max && Abs[f[p1]]>10^(-8)),
p0=p1;
If[f'[p0]==0,Print["p0 is not correct"];Exit[];,
p1=p0-f[p0]/f'[p0];
k=k+1;];];
Print["p",k,"iterations =",NumberForm[p1,16]];
Print["f[p]=",NumberForm[f[p1],16]];]
//////////////////////////////////////////

Gausselim[A0_]:=Module[{a=N[A0]},Print[MatrixForm[a]];
size=Dimensions[a];
n=size[[1]];
m=size[[2]];
For[i=1,i<=n-1,i=i+1,
For[k=i+1,k<=n,k=k+1,
(factor=a[[k,i]]/a[[i,i]];);
For[p=i,p<=m,p=p+1,
a[[k,p]]=a[[k,p]]-factor*a[[i,p]];];];];
Print[MatrixForm[a]];
ClearAll[x,i];
x[n]=a[[n,m]]/a[[n,n]];
Print[x[n]];
For[i=n-1,i>=1,i=i-1,
s=0;
For[j=i+1,j<=n,j=j+1,
s=s+a[[i,j]]*x[j];];
x[i]=(a[[i,m]]-s)/(a[[i,i]]);
Print[x[i]];];];
//////////////////////////////////

Gaussjacobi[A0_,B0_,X0_,max_]:=Module[{A=N[A0],B=N[B0],i,j,k=0,n=Length[X0],X=X0,Xold=X0},
Print["X",0,"="X];
While[k<max,
For[i=1,i<=n,i=i+1,
X[[i]]=(B[[i]]-Sum[A[[i,j]]*Xold[[j]],{j,1,i-1}]-Sum[A[[i,j]]*Xold[[j]],{j,i+1,n}])/A[[i,i]]];
Print["X",k+1,"=",NumberForm[X,10]];
If[Max[Abs[X-Xold]]<5*10^(-6),
Print["Solution with convergence tolerance of 5*10^(-6)=",
NumberForm[X,10]];
Break[];'
Xold=X;
k=k+1;];];]
//////////////////////////////////////////////

Lagrange1[x_,f_,y_]:=Module[{},s=0;m=Length[x];p=1;
For[i=1,i<=m,i=i+1,
For[j=1,j<=m,j=j+1,
If[j!=i,
p=p*(y-x[[j]])/(x[[i]]-x[[j]]);Continue;];];
Print["The Polynomial=" ,p];
s=s+p*f[[i]];p=1;];
Print["Function value at y=",s];
Print["Absoulte error=",Abs[s-Exp[y]]];]
///////////////////////////////////////////////////

NthDividedDiff[x0_,f0_,start_,end_]:=Module[{x=x0,f=f0,i=start,j=end,ans},If[i==j,Return[f[[i]]],ans=(NthDividedDiff[x,f,i+1,j]-NthDividedDiff[x,f,i,j-1])/(x[[j]]-x[[i]]);
Return[ans]];];

NewtonDDPoly[x0_,f0_]:=Module[{x1=x0,f=f0,n,P,k,j},
n=Length[x1];
P[y_]=0;
For[i=1,i<=n,i++,
prod[y_]=1;
For[k=1,k<=i-1,k++,prod[y_]=prod[y]*(y-x1[[k]])];
P[y_]=P[y]+NthDividedDiff[x1,f,1,i]*prod[y]];
Return[P[y]];];
nodes={0,1,3};
values={1,3,55};
NewtonPoly[y_]=NewtonDDPoly[nodes,values];
NewtonPoly[y]
NewtonPoly[y_]=Simplify[NewtonPoly[y]];
NewtonPoly[y]
NewtonPoly[2]

///////////////////////////////
(ClearAll[a,n,m,q,max,w,i,r,v,j,k,p,temp];)
a={{3,2,-4,3},{2,3,3,15},{5,-3,1,14}};
Print[MatrixForm[a]];
size=Dimensions[a];
n=size[[1]];
m=size[[2]];
For[i=1,i<=n,i=i+1,
maxtemp=Max[a[[i;;n,i]]];
position=Position[a[[i;;n,i]],maxtemp];
postion=First[First[position]];
position=position+(i-1);
a[[{i,position}]]=a[[{position,i}]];
temp=a[[i,i]];
For[p=1,p<=m,p=p+1,
a[[i,p]]=a[[i,p]]/temp];
For[j=1,j<=n,j=j+1,
If[i!=j,factor=a[[j,i]]/a[[i,i]];
For[k=1,k<=m,k=k+1,a[[j,k]]-a[[i,k]]*factor];];];];
Print[MatrixForm[a]]

/////////////////////////////

,
n=(b-a)/h;
xi=Table[a+h*(j-1),{j,1,n+1}];
yi=Table[0,{n+1}];
yi[[1]]=y0;
OutputDetails={{0,xi[[1]],y0}};
For[i=1,i<=n,i=i+1,
yi[[i+1]]=yi[[i]]+h*f[xi[[i]],yi[[i]]];
OutputDetails=Append[OutputDetails,{iN[xi[[i+1]]],N[yi[[i+1]]]}]];
Grid[Prepend[Transpose[{Range[0,n],xi,yi}],{"i","xi","yi"}],
Frame->All,Alignment->Right]]
